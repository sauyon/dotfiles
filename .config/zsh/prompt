#!/bin/zsh

NO_VCS_DIRS=(/var/aur $HOME)

### Segment drawing
# A few utility functions to make it easy and re-usable to draw segmented prompts

CURRENT_BG='NONE'
SEGMENT_SEP=''
RSEGMENT_SEP=''

# Begin a segment
# Takes two arguments, background and foreground. Both can be omitted,
# rendering default background/foreground.
prompt_segment() {
	local bg fg
	[[ -n $1 ]] && bg="%K{$1}" || bg="%k"
	[[ -n $2 ]] && fg="%F{$2}" || fg="%f"
	if [[ $CURRENT_BG != 'NONE' && $1 != $CURRENT_BG ]]; then
		echo -n " %{$bg%F{$CURRENT_BG}%}$SEGMENT_SEP%{$fg%} "
	else
		echo -n "%{$bg%}%{$fg%} "
	fi
	CURRENT_BG=$1
	[[ -n $3 ]] && echo -n $3
}

rprompt_segment() {
	local bg fg
	[[ -n $1 ]] && bg="%K{$1}" || bg="%k"
	[[ -n $2 ]] && fg="%F{$2}" || fg="%f"
	echo -n " %{%F{$1}%}$RSEGMENT_SEP%{$bg$fg%} "
	CURRENT_BG=$1
	[[ -n $3 ]] && echo -n $3
}

build_prompt() {
	RETVAL=$?

	### Prompt components
	# Each component will draw itself, and hide itself if no information needs to be shown

	# Context: user@hostname (who am I and where am I)
	prompt_context() {
		prompt_segment black default "%(!.%{%F{yellow}%}.)%n@%m"
	}

	# Git: branch/detached head, dirty status
	prompt_git() {
		local ref dirty
		if $(git rev-parse --is-inside-work-tree &>/dev/null) &&
			[[ ${NO_VCS_DIRS[(i)$(git rev-parse --show-toplevel)]} -gt ${#NO_VCS_DIRS} ]]; then
			dirty=$(parse_git_dirty)
			ref=$(git symbolic-ref HEAD 2> /dev/null) || ref="➦ $(git show-ref --head -s --abbrev |head -n1 2> /dev/null)"
			if [[ -n $dirty ]]; then
				prompt_segment yellow black
			else
				prompt_segment green black
			fi

			setopt promptsubst
			autoload -Uz vcs_info

			zstyle ':vcs_info:*' enable git
			zstyle ':vcs_info:*' get-revision true
			zstyle ':vcs_info:*' check-for-changes true
			zstyle ':vcs_info:*' stagedstr '✚'
			zstyle ':vcs_info:git:*' unstagedstr '●'
			zstyle ':vcs_info:*' formats ' %u%c'
			zstyle ':vcs_info:*' actionformats '%u%c'
			vcs_info
			echo -n "${ref/refs\/heads\//± }${vcs_info_msg_0_}"
		fi
	}

	prompt_hg() {
		local rev status
		if $(hg id >/dev/null 2>&1) &&
			[[ ${NO_VCS_DIRS[(i)$(hg root)]} -gt ${#NO_VCS_DIRS} ]]; then
			if $(hg prompt >/dev/null 2>&1); then
				if [[ $(hg prompt "{status|unknown}") = "?" ]]; then
					# if files are not added
					prompt_segment red white
					st='±'
				elif [[ -n $(hg prompt "{status|modified}") ]]; then
					# if any modification
					prompt_segment yellow black
					st='±'
				else
					# if working copy is clean
					prompt_segment green black
				fi
				echo -n $(hg prompt "☿ {rev}@{branch}") $st
			else
				st=""
				rev=$(hg id -n 2>/dev/null | sed 's/[^-0-9]//g')
				branch=$(hg id -b 2>/dev/null)
				if `hg st | grep -Eq "^\?"`; then
					prompt_segment red black
					st='±'
				elif `hg st | grep -Eq "^(M|A)"`; then
					prompt_segment yellow black
					st='±'
				else
					prompt_segment green black
				fi
				echo -n "☿ $rev@$branch" $st
			fi
		fi
	}

	# Dir: current working directory
	prompt_dir() {
		prompt_segment blue black '%~'
	}

	# Virtualenv: current working virtualenv
	prompt_virtualenv() {
		local virtualenv_path="$VIRTUAL_ENV"
		if [[ -n $virtualenv_path && -n $VIRTUAL_ENV_DISABLE_PROMPT ]]; then
			prompt_segment blue black "(`basename $virtualenv_path`)"
		fi
	}

	# Status:
	# - was there an error
	# - am I root
	# - are there background jobs?
	prompt_status() {
		local symbols
		symbols=()
		#[[ $RETVAL -ne 0 ]] && prompt_segment red white "%?"

		[[ $UID -eq 0 ]] && symbols+="%{%F{yellow}%}#"
		[[ $(jobs -l | wc -l) -gt 0 ]] && symbols+="%{%F{cyan}%}⚙"

		[[ -n "$symbols" ]] && prompt_segment black default "$symbols"
	}

	## Main prompt
	prompt_status
	prompt_virtualenv
	prompt_segment white black '%c'
	prompt_git
	prompt_hg

	if [[ -n $CURRENT_BG ]]; then
		echo -n " %{%k%F{$CURRENT_BG}%}$SEGMENT_SEP"
	else
		echo -n "%{%k%}"
	fi
	echo -n "%{%f%}"
	CURRENT_BG='NONE'
}

build_rprompt() {
	RETVAL=$?

	[[ $RETVAL -ne 0 ]] && [[ ! -n $sigint ]] && rprompt_segment red white "%?"

	rprompt_segment black default "%(!.%{%F{yellow}%}.)%n@%m"
	rprompt_segment blue black "%~"

	if [[ -n $CURRENT_BG ]]; then
		echo -n " %{%k%F{$CURRENT_BG}%}"
	else
		echo -n "%{%k%}"
	fi
	echo -n "%{%f%}"
	CURRENT_BG='NONE'
}

PROMPT='%{%f%b%k%}$(build_prompt) '
RPROMPT='%{%f%b%k%}$(build_rprompt)'

TRAPINT() {
	export sigint='true'
  return $(( 128 + $1 ))
}

preexec() {
	export sigint=""
}
