#!/bin/zsh

# enable color support of ls and also add handy aliases
if exists dircolors; then
  [[ -r ~/.config/dircolors ]] && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
  alias ls='ls --color=auto'
  #alias dir='dir --color=auto'
  #alias vdir='vdir --color=auto'

  alias grep='grep --color=auto'
  alias fgrep='fgrep --color=auto'
  alias egrep='egrep --color=auto'

# DIFFBIN=$(which diff)
# diff() {
#   "$DIFFBIN" -utr $@ | sed -rf "$HOME/.local/bin/colordiff.sed"
# }
  alias diff='diff -utr'
fi

# some more ls aliases
alias ll='ls -alhF'
alias la='ls -A'
alias l='ls -FB'

# rsync is better.
alias rcp='rsync -rgoP'

# fucking gpg
# alias gpg=gpg2 --homedir "$XDG_CONFIG_HOME"/gnupg

# USACO aliases
genrun() {
  name=`basename $(pwd)`
  g++ -std=c++11 gen.cpp -o gen.o && ./gen.o
  g++ "$name.cpp" -g -o "$name.o"
  time "./$name.o"
  diff "$name.out" "gen.out"
}

corun() {
  name=`basename $(pwd)`
  g++ "$name.cpp" -g -o "$name.o"
  time "./$name.o" && cat "$name.out"
}

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

alias chat='LUA_CPATH=.config/weechat/lua/cjson.so dtach -A chat weechat'

alias copy='xclip -selection clipboard'

alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias .....='cd ../../../..'
alias ......='cd ../../../../..'

alias cowfortune='fortune | cowsay'

gnight() {
  cowsay "GNIGHT's Not IGHT"
  systemctl suspend
}

alias uctl='systemctl --user'
alias jctl='journalctl -le'
alias jctlu='journalctl -leu'
alias jctlf='journalctl -fl'
alias jctlfu='journalctl -flu'

alias nb='nix-build'
alias ne='nix-env'
alias nei='nix-env -i'
alias nee='nix-env -e'
alias neu='nix-env -u'
alias nee='nix-env -q'
alias nbd='nix build -f ./default.nix'
alias ns='nix-shell'
alias nsp='nix-shell -p'
alias nf='nix search'
alias nfu='nix search -u'
alias ns='nix-shell'
alias nsp='nix-shell -p'
alias nsr='nix-shell --run'
nix-clean() {
  nix-env --delete-generations old
  nix-store --gc
}

alias sctl='sudo systemctl'
alias nre='sudo -i nixos-rebuild switch'
alias nreu='sudo -i nixos-rebuild switch --upgrade'

if non_gui; then
  alias edit="emacsclient -t"
  #sedit() { emacsclient -te $(for f in "$@"; do echo "(find-file-root \"${${f:A}//\"/\\\"})\""; done) }
  sedit() { emacsclient -te "(find-file-root \"${${1:A}//\"/\\\"}\")" }
elif exists i3-msg; then
  edit() { i3-msg workspace 2; emacsclient -n "$@" }
  #sedit() { emacsclient -ne $(for f in "$@"; do echo "(find-file-root \"${${f:A}//\"/\\\"}\")"; done) }
  sedit() { i3-msg workspace 2; emacsclient -ne "(find-file-root \"${${1:A}//\"/\\\"}\")" }
else
  edit() { emacsclient -n "$@" }
  sedit() { emacsclient -ne "(find-file-root \"${${1:A}//\"/\\\"}\")" }
fi

opendir() { alacritty --working-directory "$1" }

alias swaycheatsheet='egrep ^bind ~/.config/sway/config | cut -d '\'' '\'' -f 2- | sed '\''s/ /\t/'\'' | column -ts $'\''\t'\'' | pr -2 -w 145 -t | less'

alias oxprt='CUPS_SERVER=cups.cs.ox.ac.uk:631 enscript -G2r -d tp1hdup'
alias oxprm='CUPS_SERVER=cups.cs.ox.ac.uk:631 enscript -G2r -d mphdup'
alias oxpru='CUPS_SERVER=cups.cs.ox.ac.uk:631 enscript -G2r -d mfpugdup'

if exists gist; then
  up() {
    local OUT
    local MIME
    while [[ $# > 0 ]]; do
      MIME=$(file -b --mime-type "$1")
      if [[ $MIME =~ "^text/" ]]; then # gist
        if [[ -z $OUT ]]; then
          OUT="$(gist "$1")"
        else
          OUT="${OUT}\n$(gist "$1")"
        fi
        #else # upload to satori
      fi
      shift
    done
    echo $OUT | xclip -selection clipboard
    echo $OUT
  }
fi

# Semmle thingies
oda() {
  if [[ $(dirname $(pwd)) -ef "$SEMMLE_HOME/projects" ]]; then
    odasa addLatestSnapshot
  else
    odasa addLatestSnapshot --project "$SEMMLE_HOME/projects/$1"
  fi
}

odb() {
  if [[ $(dirname $(pwd)) -ef "$SEMMLE_HOME/projects" ]]; then
    odasa buildSnapshot --latest
  else
    odasa buildSnapshot --latest --project "$SEMMLE_HOME/projects/$1"
  fi
}

ode() {
  if [[ $(dirname $(pwd)) -ef "$SEMMLE_HOME/projects" ]]; then
    odasa export --latest
  else
    odasa export --latest --project "$SEMMLE_HOME/projects/$1"
  fi
}

odbe() {
  oda "$1"
  odb "$1"
  ode "$1"
}
